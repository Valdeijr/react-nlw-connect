/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * API NLW
 * OpenAPI spec version: 0.1.2
 */
export type PostSubscribersBody = {
  name: string
  email: string
  referrer?: string | null
}

export type PostSubscribers201 = {
  subscriberId: string
}

/**
 * @nullable
 */
export type GetInvitesSubscriberId302 =
  | (typeof GetInvitesSubscriberId302)[keyof typeof GetInvitesSubscriberId302]
  | null

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetInvitesSubscriberId302 = {
  null: 'null',
} as const

export type GetSubscribersSubscriberIdRankingClicks200 = {
  count: number
}

export type GetSubscribersSubscriberIdRankingCount200 = {
  count: number
}

export type GetSubscribersSubscriberIdRankingPosition200 = {
  /** @nullable */
  position: number | null
}

export type GetRanking200RankingItem = {
  id: string
  name: string
  score: number
}

export type GetRanking200 = {
  ranking: GetRanking200RankingItem[]
}

/**
 * @summary Subscriber Event Route
 */
export const getPostSubscribersUrl = () => {
  return 'http://localhost:3330/subscribers'
}

export const postSubscribers = async (
  postSubscribersBody: PostSubscribersBody,
  options?: RequestInit
): Promise<PostSubscribers201> => {
  const res = await fetch(getPostSubscribersUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(postSubscribersBody),
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: PostSubscribers201 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Access Invite Link And Redirects User
 */
export const getGetInvitesSubscriberIdUrl = (subscriberId: string) => {
  return `http://localhost:3330/invites/${subscriberId}`
}

export const getInvitesSubscriberId = async (subscriberId: string, options?: RequestInit): Promise<unknown> => {
  const res = await fetch(getGetInvitesSubscriberIdUrl(subscriberId), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: unknown = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Get Subscriber Invite Clicks Count
 */
export const getGetSubscribersSubscriberIdRankingClicksUrl = (subscriberId: string) => {
  return `http://localhost:3330/subscribers/${subscriberId}/ranking/clicks`
}

export const getSubscribersSubscriberIdRankingClicks = async (
  subscriberId: string,
  options?: RequestInit
): Promise<GetSubscribersSubscriberIdRankingClicks200> => {
  const res = await fetch(getGetSubscribersSubscriberIdRankingClicksUrl(subscriberId), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetSubscribersSubscriberIdRankingClicks200 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Get Subscriber Invite Count
 */
export const getGetSubscribersSubscriberIdRankingCountUrl = (subscriberId: string) => {
  return `http://localhost:3330/subscribers/${subscriberId}/ranking/count`
}

export const getSubscribersSubscriberIdRankingCount = async (
  subscriberId: string,
  options?: RequestInit
): Promise<GetSubscribersSubscriberIdRankingCount200> => {
  const res = await fetch(getGetSubscribersSubscriberIdRankingCountUrl(subscriberId), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetSubscribersSubscriberIdRankingCount200 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Get Subscriber Invite Clicks Count
 */
export const getGetSubscribersSubscriberIdRankingPositionUrl = (subscriberId: string) => {
  return `http://localhost:3330/subscribers/${subscriberId}/ranking/position`
}

export const getSubscribersSubscriberIdRankingPosition = async (
  subscriberId: string,
  options?: RequestInit
): Promise<GetSubscribersSubscriberIdRankingPosition200> => {
  const res = await fetch(getGetSubscribersSubscriberIdRankingPositionUrl(subscriberId), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetSubscribersSubscriberIdRankingPosition200 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Get Ranking
 */
export const getGetRankingUrl = () => {
  return 'http://localhost:3330/ranking'
}

export const getRanking = async (options?: RequestInit): Promise<GetRanking200> => {
  const res = await fetch(getGetRankingUrl(), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetRanking200 = body ? JSON.parse(body) : {}

  return data
}
